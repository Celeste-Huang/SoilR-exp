#!/usr/bin/env Rscript
# This script can be used manually but is mainly called by the git-precommit-hook
# So that the last part of the version number is increased and the date updated every time we commit.
if(is.null(sys.calls()[[sys.nframe()-1]])){
  # if we are called via Rscript we figure out where we are
  requireNamespace('getopt')
  script.path<- getopt::get_Rscript_filename()
  script.dir<- dirname(script.path)
}else{
  # if the script is sourced from an R/Rstudio session we 
  # assume that we are here  
  script.dir='.' 
}
doIncrement <- TRUE # default
# get the environment variable and modify if necessary
tmpEnv <- as.logical(Sys.getenv("doIncrement"))
if (!is.na(tmpEnv)){
  doIncrement <- tmpEnv
}
if(doIncrement){
  # if you do not want to increment the version number
  # just set the environment variable before the git commit like so:
  #
  # doIncrement=FALSE git commit -m "commit message"
  #
  #path.to.DESCRIPTION<- file.path(script.dir,'../..','pkg','DESCRIPTION') #for location in ${GIT_DIR}.git/hooks
  path.to.DESCRIPTION<- file.path(script.dir,'..','pkg','DESCRIPTION') # for location in ${GIT_DIR}/SoilR_git_hooks
  DescriptionMatrix <- read.dcf(path.to.DESCRIPTION)
  
  versionString <- DescriptionMatrix[[1,'Version']]  
  sep <- '.'
  sep_pattern <- paste0('\\',sep)
  Parts <- strsplit(versionString,split=sep_pattern)[[1]]
  trunk <- paste(Parts[1:2],collapse=sep)
  counter <- as.integer(Parts[[3]])
  browser()
  newVersionString <- paste(trunk,counter+1,sep=sep) 
  print(newVersionString)
  DescriptionMatrix[[1,'Version']]   <- newVersionString
  DescriptionMatrix[[1,'Date']]   <- as.character(Sys.Date())
  write.dcf(DescriptionMatrix,file=path.to.DESCRIPTION)

  # add the updated DESCRIPTION to the commit
  system2(command='git',args=c('add',path.to.DESCRIPTION))
}
